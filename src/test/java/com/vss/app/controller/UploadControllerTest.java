package com.vss.app.controller;

import com.vss.app.service.abstractions.IScanService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;

class UploadControllerTest {

    @Mock
    private IScanService scanService;

    @InjectMocks
    private UploadController uploadController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void uploadAndScanFiles_ShouldReturnAccepted_WhenFilesUploadedSuccessfully() throws IOException {
        MultipartFile[] files = {
                new MockMultipartFile("file1", "file1.txt", MediaType.TEXT_PLAIN_VALUE, "content".getBytes())
        };

        ResponseEntity<String> response = uploadController.uploadAndScanFiles(files);

        assertEquals(202, response.getStatusCodeValue());
        assertEquals("File is submitted for scan", response.getBody());
        verify(scanService).orchestrateFileScan(files);
    }

    @Test
    void uploadAndScanFiles_ShouldHandleEmptyFileArray() throws IOException {
        MultipartFile[] files = new MultipartFile[]{};

        ResponseEntity<String> response = uploadController.uploadAndScanFiles(files);

        assertEquals(202, response.getStatusCodeValue());
        assertEquals("File is submitted for scan", response.getBody());
        verify(scanService).orchestrateFileScan(files);  // Verify scan still runs with empty file array
    }

    @Test
    void uploadAndScanFiles_ShouldHandleIOException_WhenThrown() throws IOException {
        // Given
        MultipartFile[] files = {
                new MockMultipartFile("file1", "file1.txt", MediaType.TEXT_PLAIN_VALUE, "content".getBytes())
        };

        // Simulate an exception thrown by scan service
        doThrow(IOException.class).when(scanService).orchestrateFileScan(files);

        // Expecting the exception to propagate, so no assertions on the response directly
        try {
            uploadController.uploadAndScanFiles(files);
        } catch (IOException e) {
            assertEquals(IOException.class, e.getClass());
        }

        verify(scanService).orchestrateFileScan(files);
    }

    @Test
    void uploadAndScanFiles_ShouldHandleInvalidContentType() throws IOException {
        MultipartFile[] files = {
                new MockMultipartFile("file1", "file1.exe", MediaType.APPLICATION_OCTET_STREAM_VALUE, "content".getBytes())
        };

        ResponseEntity<String> response = uploadController.uploadAndScanFiles(files);

        assertEquals(202, response.getStatusCodeValue());
        assertEquals("File is submitted for scan", response.getBody());
        verify(scanService).orchestrateFileScan(files);
    }
}

