package com.vss.app.service;

import com.vss.app.model.ActionDetails;
import com.vss.app.model.Rule;
import com.vss.app.model.ScanResult;
import com.vss.app.service.concretions.NotificationAction;
import com.vss.app.service.concretions.ScanFailedTrigger;
import com.vss.app.service.concretions.ScanInProgressTrigger;
import com.vss.app.service.concretions.VulnerabilitiesFoundTrigger;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class RuleEngine {

    private final List<Rule> rules;

    public RuleEngine() {
        this.rules = loadPredefinedRules();
    }

    public void evaluateTriggers(ScanResult result) {
        for (Rule rule : rules) {
            if (rule.isTriggered(result)) {
                rule.executeAction();
            }
        }
    }

    private List<Rule> loadPredefinedRules() {
        Rule vulnerabilityCountRule = new Rule(new VulnerabilitiesFoundTrigger(),
                new NotificationAction(ActionDetails.builder().message("This dependency has failed the vulnerability scan").build()));
        Rule scanInProgressRule = new Rule(new ScanInProgressTrigger(),
                new NotificationAction(ActionDetails.builder().message("Vulnerability scan is in progress").build()));
        Rule scanFailedRule = new Rule(new ScanFailedTrigger(),
                new NotificationAction(ActionDetails.builder().message("Vulnerability scan has failed").build()));
        List<Rule> rules = new ArrayList<>();
        rules.add(vulnerabilityCountRule);
        rules.add(scanFailedRule);
        rules.add(scanInProgressRule);
        return rules;
    }
}

