package com.vss.app.service;

import com.vss.app.model.Rule;
import com.vss.app.model.ScanResult;
import com.vss.app.service.abstractions.IAction;
import com.vss.app.service.concretions.*;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
public class RuleEngine {

    private final List<Rule> rules;
    private final EmailNotificationAction emailNotificationAction;
    private final SlackMessageNotification slackMessageNotification;

    public RuleEngine(EmailNotificationAction emailNotificationAction, SlackMessageNotification slackMessageNotification) {
        this.emailNotificationAction = emailNotificationAction;
        this.slackMessageNotification = slackMessageNotification;
        this.rules = loadPredefinedRules();
    }

    public void evaluateTriggers(ScanResult result) {
        for (Rule rule : rules) {
            if (rule.isTriggered(result)) {
                rule.executeAction(result);
            }
        }
    }

    private List<Rule> loadPredefinedRules() {
        Rule vulnerabilityCountRule = new Rule(new VulnerabilitiesFoundTrigger(), getAllActions());
        Rule scanFailedRule = new Rule(new ScanFailedTrigger(), getAllActions());
        List<Rule> rules = new ArrayList<>();
        rules.add(vulnerabilityCountRule);
        rules.add(scanFailedRule);
        return rules;
    }

    private List<IAction> getAllActions() {
        return List.of(emailNotificationAction, slackMessageNotification);
    }
}

