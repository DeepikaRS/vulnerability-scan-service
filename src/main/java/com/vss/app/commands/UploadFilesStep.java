package com.vss.app.commands;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.vss.app.model.ScanResult;
import com.vss.app.model.UploadApiResponse;
import com.vss.app.model.UploadContext;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

@Service
public class UploadFilesStep extends ScanStep {

    private final RestTemplate restTemplate = new RestTemplate();
    ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public void execute(UploadContext context) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.set("Authorization", "Bearer " + jwtToken);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

        for (MultipartFile file : context.getFiles()) {
            body.add("fileData", new ByteArrayResource(file.getBytes()) {
                @Override
                public String getFilename() {
                    return file.getOriginalFilename();
                }
            });
        }
        body.add("repositoryName", "test");
        body.add("commitName", "1234");

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        String externalApiUrl = "https://debricked.com/api/1.0/open/uploads/dependencies/files";
        ResponseEntity<String> response = restTemplate.exchange(
                externalApiUrl,
                HttpMethod.POST,
                requestEntity,
                String.class
        );

        if (response.getStatusCode() == HttpStatus.OK) {
            JsonNode root;
            try {
                root = objectMapper.readTree(response.getBody());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            try {
                UploadApiResponse uploadApiResponse = objectMapper.treeToValue(root, UploadApiResponse.class);
                context.setUploadId(uploadApiResponse.getCiUploadId());
                next(context);
            } catch (JsonProcessingException e) {
                throw new RuntimeException(e);
            }
        } else {
            context.setScanResult(ScanResult.builder().scanFailedMessage("Error encountered during vulnerability scan").build());
        }
    }
}
