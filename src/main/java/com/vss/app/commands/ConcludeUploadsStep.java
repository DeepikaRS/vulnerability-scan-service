package com.vss.app.commands;

import com.vss.app.model.ActionDetails;
import com.vss.app.model.ScanResult;
import com.vss.app.model.UploadContext;
import com.vss.app.service.abstractions.IAction;
import com.vss.app.service.concretions.EmailNotificationAction;
import com.vss.app.service.concretions.SlackMessageNotification;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.util.List;

@Service
public class ConcludeUploadsStep extends ScanStep {

    private final RestTemplate restTemplate = new RestTemplate();
    private final EmailNotificationAction emailNotificationAction;
    private final SlackMessageNotification slackMessageNotification;


    public ConcludeUploadsStep(EmailNotificationAction emailNotificationAction, SlackMessageNotification slackMessageNotification) {
        super();
        this.emailNotificationAction = emailNotificationAction;
        this.slackMessageNotification = slackMessageNotification;
    }

    @Override
    public void execute(UploadContext context) throws IOException {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        headers.set("Authorization", "Bearer " + jwtToken);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

        body.add("ciUploadId", context.getUploadId());

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        String externalApiUrl = "https://debricked.com/api/1.0/open/finishes/dependencies/files/uploads";
        ResponseEntity<String> response = restTemplate.exchange(
                externalApiUrl,
                HttpMethod.POST,
                requestEntity,
                String.class
        );

        if (response.getStatusCode() != HttpStatus.NO_CONTENT && response.getStatusCode() != HttpStatus.OK) {
            context.setScanResult(ScanResult.builder().scanFailedMessage("Error encountered during vulnerability scan").build());
        }
        else {
            ActionDetails actionDetails =
                    ActionDetails.builder().message("Debricked vulnerability scan is in progress. You will receive a follow up notification once the scan completes.").build();
            for(IAction action : getAllActions()){
                action.execute(actionDetails);
            }
        }
        next(context);
    }

    private List<IAction> getAllActions() {
        return List.of(emailNotificationAction, slackMessageNotification);
    }
}
